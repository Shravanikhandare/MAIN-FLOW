USE STUDENTMANAGEMENT;

-- CREATE COURSES TBALE
CREATE TABLE COURSES (
    COURSE_ID INT AUTO_INCREMENT PRIMARY KEY,
    COURSE_NAME VARCHAR(50),
    COURSE_DESCRIPTION TEXT
);

-- CREATE ENROLMETS TABLE
CREATE TABLE ENROLMENTS (
    ENROLMENT_ID INT AUTO_INCREMENT PRIMARY KEY,
    STUDENT_ID INT,
    COURSE_ID INT,
    ENROLMENT_DATE DATE,
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(STUDENT_ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(COURSE_ID)
);



-- INSERT DATA INTO COURSES TABLE
INSERT INTO COURSES (COURSE_NAME, COURSE_DESCRIPTION) VALUES
('Mathematics', 'Advanced Algebra and Calculus'),
('Physics', 'Mechanics and Thermodynamics'),
('English Literature', 'Study of Classic and Modern Literature'),
('Biology', 'Cellular Biology and Genetics'),
('Computer Science', 'Introduction to Programming');

SELECT * FROM COURSES; 

-- INSERT DATA INTO ENROLMENTS TABLE
INSERT INTO ENROLMENTS (STUDENT_ID, COURSE_ID, ENROLMENT_DATE) VALUES
(1, 1, '2025-01-10'), 
(1, 3, '2025-01-12'), 
(2, 1, '2025-01-10'), 
(2, 2, '2025-01-11'), 
(3, 1, '2025-01-10'), 
(3, 3, '2025-01-12'), 
(4, 2, '2025-01-11'), 
(5, 4, '2025-01-13'), 
(6, 3, '2025-01-12'),
(6, 1, '2025-01-10'), 
(7, 2, '2025-01-11'), 
(8, 4, '2025-01-13'), 
(9, 1, '2025-01-10'), 
(10, 3, '2025-01-12'); 

SELECT * FROM ENROLMENTS;

-- QUERY 1 (LIST ALL STUDENTS AND THE COURSES THEY ARE ENROLLED IN)
-- USES INNER JOIN TO INCLUDE ONLY STUDENTS WITHT ENROLMENTS

SELECT s.NAME, c.COURSE_NAME
FROM STUDENTS s
INNER JOIN ENROLMENTS e ON s.STUDENT_ID = e.STUDENT_ID
INNER JOIN COURSES c ON e.COURSE_ID = c.COURSE_ID
ORDER BY s.NAME, c.COURSE_NAME;

-- QUERY 2 (FIND THE NUMBER OF STUDENTS ENROLLED IN EACH  COURSE)
-- USES LEFT JOIN TO INCLUDE ALL COURSES, EVEN THOSE WITHOUT ENROLMENTS

SELECT c.COURSE_ID, c.COURSE_NAME, COUNT(e.STUDENT_ID) as STUDENT_COUNT
FROM COURSES c
LEFT JOIN ENROLMENTS e ON c.COURSE_ID = e.COURSE_ID
GROUP BY c.COURSE_ID, c.COURSE_NAME
ORDER BY c.COURSE_ID;

-- QUERY 3 (LIST STUDENTS WHO HAVE ENROLLED IN MORE THAN ONE COURSE)
-- USES GROUP BY AND HAVING TO FILTER STUDENTS WITH MORE THAN ONE COURSE ENROLMENT

SELECT s.STUDENT_ID, s.NAME, COUNT(e.COURSE_ID) as COURSE_COUNT
FROM STUDENTS s
INNER JOIN ENROLMENTS e ON s.STUDENT_ID = e.STUDENT_ID
GROUP BY s.STUDENT_ID, s.NAME
HAVING COUNT(e.COURSE_ID) > 1
ORDER BY s.STUDENT_ID;

-- QUERY 4 (FIND COURSES WITH NO ENROLLRD STUDENTS)
-- USES LEFT JOIN AND WHERE CLAUSE TO FIND COURSES WITH NO MATCHING ENROLMENTS

SELECT c.COURSE_ID, c.COURSE_NAME
FROM COURSES c
LEFT JOIN ENROLMENTS e ON c.COURSE_ID = e.COURSE_ID
WHERE e.ENROLMENT_ID IS NULL
ORDER BY c.COURSE_ID;
